module Main();
  reg  [31:0] In [31:0];
  reg clk;
  reg [31:0] PC;
  wire [31:0] InsMemOut;
  wire [1:0] ALUOp;
  wire RegDst, RegWrite, ALUSrc, MemRead, MemWrite, MemToReg,Branch, Jump,zero;
  wire [31:0]RD1;
  wire [31:0]RD2;
  wire [31:0] WD3;
  wire [31:0] A3;
  wire [31:0] SignImm;
  wire [31:0] SrcB;
  wire [3:0] ALUCtl;
  wire [31:0] ALUResult;
  wire [31:0] ReadData;
  wire [31:0] PCPlus4;
  wire [31:0] Shift2;
  wire [31:0] PCBranch;
  wire [27:0] ShiftForJump;
  wire PCSrc;
  wire [31:0] AddressOut;
  wire [31:0]PCPrime;
initial
begin
  
InsMem H1(clk,PC,InsMemOut);
controlUnit H2(ALUOp, RegDst, RegWrite, ALUSrc, MemWrite,MemToReg, Branch, Jump,InsMemOut[31:26]);
RegFile H3(InsMemOut[25:21], RD1 , InsMemOut[20:16] , RD2 , clk , RegWrite , A3 ,WD3 );
sign_extend H4(InsMemOut[15:0],SignImm);
mux2_1 H5(RD2,SignImm,ALUSrc,SrcB);
ALUControl H6(ALUOp, InsMemOut[5:0], ALUCtl);
ALU H7(RD1,SrcB,InsMemOut[10:6],ALUCtl,ALUResult,zero);
memory H8(clk,MemWrite,ALUResult,RD2,ReadData);
mux2_1 H9(ReadData,ALUResult,MemToReg,WD3);
mux2_1 H10(InsMemOut[20:16],InsMemOut[25:21],RegDst,A3);
adder H11(PCPlus4,4,PC);
leftShift2 H12(SignImm,Shift2);
adder H13(PCBranch,Shift2,PCPlus4);
leftShift2 H14(InsMemOut[25:0],ShiftForJump);
AND H16(PCSrc,zero,Branch);
mux2_1 H15(PCPlus4,PCBranch,PCSrc,AddressOut);
mux2_1 H16(AddressOut,{PC[31:28],ShiftForJump},Jump,PCPrime);

PC =0;  
clk=1'b1;
forever #50 clk=~clk;
end

always @(posedge clk)
begin
H1.InsMemOut = 1;



end


  
  
endmodule